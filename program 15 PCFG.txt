class PCFGParser:
    def __init__(self, pcfg):
        self.pcfg = pcfg

    def parse(self, sentence):
        words = sentence.split()
        n = len(words)
        table = [[{} for _ in range(n + 1)] for _ in range(n + 1)]
        for i in range(1, n + 1):
            for A, p in self.pcfg.get(words[i - 1], []):
                table[i - 1][i][A] = p
        for width in range(2, n + 1):
            for start in range(n - width + 1):
                end = start + width
                for mid in range(start + 1, end):
                    for B, p1 in table[start][mid].items():
                        for C, p2 in table[mid][end].items():
                            if (B, C) in self.pcfg:
                                for A, p in self.pcfg[(B, C)]:
                                    new_p = p1 * p2 * p
                                    if A not in table[start][end] or new_p > table[start][end][A]:
                                        table[start][end][A] = new_p
        max_parse = max(table[0][n].items(), key=lambda x: x[1]) if table[0][n] else (None, 0.0)
        return max_parse[0]

def main():
    pcfg = {
        'NP': [('Det', 0.6), ('NP', 'NP', 0.4)],
        'VP': [('V', 'NP', 0.7), ('VP', 'VP', 'PP', 0.3)],
        'PP': [('P', 'NP', 0.5), ('PP', 'PP', 'PP', 0.5)],
        'Det': [('the', 1.0)],
        'N': [('man', 0.5), ('dog', 0.5)],
        'V': [('saw', 1.0)],
        'P': [('with', 1.0)]
    }
    parser = PCFGParser(pcfg)
    sentence = "the man saw the dog with the telescope"
    parse = parser.parse(sentence)
    if parse:
        print("Highest probability parse:", parse)
    else:
        print("No valid parse found for the sentence.")

if __name__ == "__main__":
    main()
